When would you want to use a remote repository rather than keeping all your work local?
- if you are collaborating with other people it would be helpful to have a remote version of your files that all can access. 
- Also, if you work form multiple computers, like I am now!

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
- because you might have branches that you have been working on on your local machine that you want to preserve
- it is genreally better to have control over your repository

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- A fork is a clone of someone else's GitHub repository. You use forks instead of making your own clone, because a fork is always linked back to the original owner. You don't have permission to change someone else's repository, but you can fork it and make changes to that on your own GitHub account.
- A clone is an exact copy of a repository. This can be a copy of a remote repository on your local, or a copy of your local repositoty on your local.
- A branch is a part of a repository. You can use a branch of you want to create a new feature, or experiment with something that you don't necessarily want to be a part of your master. 

What is the benefit of having a copy of the last known state of the remote stored locally?
- If you have a copy of the last known state of the remote, then you won't have to worry about making a merge if a collaborator has modified the remote

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
- Without GitHub collaboration might involve each person taking turns editing a file that is stored online. It would be extremely difficult for more than one person to work on the same file as it would be very hard to keep track of changes. It would be easier because changes would be limited - you would have to take turns passing a file back and forth. This is a more inefficient process, and collaboration would be slower than it could be on GitHub.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
- If you are working on a new feature or experimental feature, you might want to use a separate branch. This means that you are free to experiment and update on your local machine and allows the other collaborators to verify your code before commiting it.